name: Check download command

on:
  - push
  - pull_request

permissions:
  contents: read

env:
  # Enable backtraces for easier debugging
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        commands: [
          "--mini-tests",
          "--std-tests",
          # FIXME: re-enable asm tests when GCC can emit in the right syntax.
          # "--asm-tests",
          "--test-libcore",
          "--extended-rand-tests",
          "--extended-regex-example-tests",
          "--extended-regex-tests",
          "--test-successful-rustc --nb-parts 2 --current-part 0",
          "--test-successful-rustc --nb-parts 2 --current-part 1",
          "--projects",
        ]

    steps:
    - uses: actions/checkout@v3

    # `rustup show` installs from rust-toolchain.toml
    - name: Setup rust toolchain
      run: rustup show

    - name: Setup rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install packages
      # `llvm-14-tools` is needed to install the `FileCheck` binary which is used for asm tests.
      run: sudo apt-get install ninja-build ripgrep llvm-14-tools

    - name: Setup path to libgccjit
      run: |
          echo 'download-gccjit = true' > config.toml

    - name: Set env
      run: |
        echo "workspace="$GITHUB_WORKSPACE >> $GITHUB_ENV

    #- name: Cache rust repository
      ## We only clone the rust repository for rustc tests
      #if: ${{ contains(matrix.commands, 'rustc') }}
      #uses: actions/cache@v3
      #id: cache-rust-repository
      #with:
        #path: rust
        #key: ${{ runner.os }}-packages-${{ hashFiles('rust/.git/HEAD') }}

    - name: Build
      run: |
        ./y.sh prepare --only-libcore
        # TODO: remove --features master when it is back to the default.
        ./y.sh build --features master
        # TODO: remove --features master when it is back to the default.

    - name: Set env (part 2)
      run: |
        # Set the `LD_LIBRARY_PATH` and `LIBRARY_PATH` env variables...
        echo "LD_LIBRARY_PATH="$(./y.sh info | grep -v Using) >> $GITHUB_ENV
        echo "LIBRARY_PATH="$(./y.sh info | grep -v Using) >> $GITHUB_ENV

    - name: Build (part 2)
      run: |
        echo "LIBRARY_PATH=" $LIBRARY_PATH
        cargo test --features master
        ./y.sh clean all

    - name: Prepare dependencies
      run: |
        git config --global user.email "user@example.com"
        git config --global user.name "User"
        ./y.sh prepare

    - name: Add more failing tests because the sysroot is not compiled with LTO
      run: cat tests/failing-non-lto-tests.txt >> tests/failing-ui-tests.txt

    - name: Run tests
      run: |
        # TODO: remove --features master when it is back to the default.
        ./y.sh test --features master --release --clean --build-sysroot ${{ matrix.commands }}
