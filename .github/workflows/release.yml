name: CI with sysroot compiled in release mode

on:
  - push
  - pull_request

permissions:
  contents: read

env:
  # Enable backtraces for easier debugging
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        commands: [
          "--test-successful-rustc --nb-parts 2 --current-part 0",
          "--test-successful-rustc --nb-parts 2 --current-part 1",
        ]

    steps:
    - uses: actions/checkout@v3

    # `rustup show` installs from rust-toolchain.toml
    - name: Setup rust toolchain
      run: rustup show

    - name: Setup rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install packages
      run: sudo apt-get install ninja-build ripgrep

    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
          workflow: main.yml
          name: gcc-13
          path: gcc-13
          repo: antoyo/gcc
          branch: "master"
          event: push
          search_artifacts: true # Because, instead, the action only check the last job ran and that won't work since we want multiple artifacts.

    - name: Setup path to libgccjit
      run: |
          sudo dpkg --force-overwrite -i gcc-13/gcc-13.deb
          echo /usr/lib/ > gcc_path

    - name: Set env
      run: |
        echo "LIBRARY_PATH=$(cat gcc_path)" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$(cat gcc_path)" >> $GITHUB_ENV
        echo "workspace="$GITHUB_WORKSPACE >> $GITHUB_ENV

    - name: Build
      run: |
        ./y.sh prepare --only-libcore
        # TODO: remove --features master when it is back to the default.
        EMBED_LTO_BITCODE=1 ./y.sh build --release --release-sysroot --features master
        # TODO: remove --features master when it is back to the default.
        cargo test --features master
        ./y.sh clean all

    - name: Prepare dependencies
      run: |
        git config --global user.email "user@example.com"
        git config --global user.name "User"
        ./y.sh prepare
        # FIXME(antoyo): we cannot enable LTO for stdarch tests currently because of some failing LTO tests using proc-macros.
        echo -n 'lto = "fat"' >> build_sysroot/Cargo.toml

    - name: Add more failing tests because of undefined symbol errors (FIXME)
      run: cat failing-lto-tests.txt >> failing-ui-tests.txt

    - name: Run tests
      run: |
        # TODO: remove --features master when it is back to the default.
        EMBED_LTO_BITCODE=1 ./y.sh test --release --clean --release-sysroot --build-sysroot ${{ matrix.commands }} --features master
