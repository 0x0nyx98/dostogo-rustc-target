# TODO: refactor to avoid duplication with the ci.yml file.
name: Failures

on:
  - pull_request

permissions:
  contents: read

env:
  # Enable backtraces for easier debugging
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        libgccjit_version:
          - gcc: "libgccjit.so"
            artifacts_branch: "master"
            # TODO: switch back to --no-default-features in the case of libgccjit 12 when the default is to enable
            # master again.
            extra: "--features master"
          - gcc: "libgccjit_without_int128.so"
            artifacts_branch: "master-without-128bit-integers"
            extra: "--features master"
          - gcc: "libgccjit12.so"
            artifacts_branch: "gcc12"
            # FIXME(antoyo): we need to set GCC_EXEC_PREFIX so that the linker can find the linker plugin.
            # Not sure why it's not found otherwise.
            env_extra: "TEST_FLAGS='-Cpanic=abort -Zpanic-abort-tests' GCC_EXEC_PREFIX=/usr/lib/gcc/"

    steps:
    - uses: actions/checkout@v3

    # `rustup show` installs from rust-toolchain.toml
    - name: Setup rust toolchain
      run: rustup show

    - name: Setup rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install packages
      run: sudo apt-get install ninja-build ripgrep

    - name: Install libgccjit12
      if: matrix.libgccjit_version.gcc == 'libgccjit12.so'
      run: sudo apt-get install libgccjit-12-dev

    - name: Setup path to libgccjit
      if: matrix.libgccjit_version.gcc == 'libgccjit12.so'
      run: echo /usr/lib/gcc/x86_64-linux-gnu/12 > gcc_path

    - name: Download artifact
      if: matrix.libgccjit_version.gcc != 'libgccjit12.so'
      uses: dawidd6/action-download-artifact@v2
      with:
          workflow: main.yml
          name: gcc-13
          path: gcc-13
          repo: antoyo/gcc
          branch: ${{ matrix.libgccjit_version.artifacts_branch }}
          event: push
          search_artifacts: true # Because, instead, the action only check the last job ran and that won't work since we want multiple artifacts.

    - name: Setup path to libgccjit
      if: matrix.libgccjit_version.gcc != 'libgccjit12.so'
      run: |
          sudo dpkg --force-overwrite -i gcc-13/gcc-13.deb
          echo /usr/lib/ > gcc_path

    - name: Set env
      run: |
        echo "LIBRARY_PATH=$(cat gcc_path)" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$(cat gcc_path)" >> $GITHUB_ENV
        echo "workspace="$GITHUB_WORKSPACE >> $GITHUB_ENV

    #- name: Cache rust repository
      #uses: actions/cache@v3
      #id: cache-rust-repository
      #with:
        #path: rust
        #key: ${{ runner.os }}-packages-${{ hashFiles('rust/.git/HEAD') }}

    - name: Git config
      run: |
        git config --global user.email "user@example.com"
        git config --global user.name "User"

    - name: Prepare dependencies
      if: matrix.libgccjit_version.gcc == 'libgccjit12.so'
      run: ./y.sh prepare --libgccjit12-patches

    - name: Prepare dependencies
      if: matrix.libgccjit_version.gcc != 'libgccjit12.so'
      run: ./y.sh prepare

    - name: Add more failing tests because the sysroot is not compiled with LTO
      run: cat failing-non-lto-tests.txt >> failing-ui-tests.txt

    - name: Run tests
      id: tests
      run: |
        ${{ matrix.libgccjit_version.env_extra }} ./y.sh test --release --clean --build-sysroot --test-failing-rustc ${{ matrix.libgccjit_version.extra }} | tee output_log
        rg --text "test result" output_log >> $GITHUB_STEP_SUMMARY
